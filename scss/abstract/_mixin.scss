@use 'sass:list';
@use 'variable' as *;
@use 'colors' as *;

// Flex
@mixin set-flex(
	$FIXED: null,
	$INLINE: false,
	$DIRECTION: row,
	$JUSTIFY: null,
	$ALIGN: null,
	$WRAP: null
) {
	@if $FIXED != null {
		@if $FIXED {
			flex-shrink: 0;
			flex-grow: 0;
		} @else {
			flex-shrink: 1;
			flex-grow: 1;
		}
	} @else {
		@if $INLINE {
			display: inline-flex;
		} @else {
			display: flex;
		}
		@if $DIRECTION {
			flex-direction: $DIRECTION;
		}
		@if $JUSTIFY {
			justify-content: $JUSTIFY;
		}
		@if $ALIGN {
			align-items: $ALIGN;
		}
		@if $WRAP {
			flex-wrap: $WRAP;
		}
	}
}

// SPACE
@mixin spaceDirection($TYPE, $SIZE, $DIRECTION) {
	@if $DIRECTION == null {
		#{$TYPE}: $SIZE;
	}
	@if $DIRECTION == t or $DIRECTION == y {
		#{$TYPE}-top: $SIZE;
	}
	@if $DIRECTION == b or $DIRECTION == y {
		#{$TYPE}-bottom: $SIZE;
	}
	@if $DIRECTION == r or $DIRECTION == x {
		#{$TYPE}-right: $SIZE;
	}
	@if $DIRECTION == l or $DIRECTION == x {
		#{$TYPE}-left: $SIZE;
	}
}
@mixin space($MARGIN, $SIZE, $DIRECTION: null) {
	@if $MARGIN {
		@include spaceDirection(margin, $SIZE, $DIRECTION);
	} @else {
		@include spaceDirection(padding, $SIZE, $DIRECTION);
	}
}

// Ellipsis
@mixin ellipsis($line: 1, $line-height: null) {
	overflow: hidden;
	text-overflow: ellipsis;
	@if $line == 1 {
		white-space: nowrap;
	}
	@if $line > 1 {
		display: -webkit-box;
		-webkit-box-orient: vertical;
		-webkit-line-clamp: $line;
		@if $line-height != null {
			max-height: $line-height * $line;
		}
	}
}

@function urlImg($TYPE, $NAME, $COLOR: black, $VALUE: svg) {
	@if $COLOR != '' {
		@return '../images/' + $TYPE + '/' + $NAME + '-' + $COLOR + '.' + $VALUE;
	} @else {
		@return '../images/' + $TYPE + '/' + $NAME + '.' + $VALUE;
	}
}

%defaultInput {
	position: relative;
	input {
		position: absolute;
		width: 100%;
		height: 100%;
		top: 0;
		left: 0;
		opacity: 0;
		z-index: 10;

		&[type='checkbox'] {
			& + .input-text {
				.icon {
					border-radius: 2px;
					&::after {
						@extend %resetIcon;
						width: 100%;
						height: 100%;
						background-image: url(urlImg(ico, checkbox, white));
					}
				}
			}
			&:checked:not(:disabled) + .input-text {
				.icon {
					background-color: $C-PN;
				}
			}

			&:checked:disabled + .input-text {
				.icon {
					&::after {
						background-image: url(urlImg(ico, checkbox, gray));
					}
				}
			}
		}
		&[type='radio'] {
			& + .input-text {
				.icon {
					border-radius: 30px;
					&::after {
						$S: 10px;
						width: $S;
						height: $S;
						top: 50%;
						left: 50%;
						background-color: $C-PN;
						border-radius: $S;
						transform: translate(-50%, -50%);
					}
				}
			}
			&:checked:not(:disabled) + .input-text {
				.icon {
					background-color: $C-W;
				}
			}

			&:checked:disabled + .input-text {
				.icon {
					&::after {
						background-color: $C-BN;
					}
				}
			}
		}

		&:checked:not(:disabled) + .input-text {
			.icon {
				background-color: $C-BD;
				border-color: $C-PN;
				&::after {
					display: block;
				}
			}
		}

		&:disabled {
			& + .input-text {
				.icon {
					background-color: $C-BD;
					border-color: $C-BN;
				}
				.text {
					color: $C-FID;
				}
			}
			&:checked + .input-text {
				.icon {
					&::after {
						display: block;
					}
				}
			}
		}
	}
	.input-text {
		@include set-flex();
		position: relative;
		gap: 6px;
		z-index: 5;
		.icon {
			$S: 18px;
			@include set-flex($FIXED: true);

			position: relative;
			width: $S;
			height: $S;
			background-color: $C-W;
			border: 1px solid $C-BN;
			&::after {
				position: absolute;
				display: none;
				top: 0;
				left: 0;
				border-radius: $S;
				content: '';
			}
		}
		.text {
			color: $C-FI;
			font-weight: 400;
			font-size: 14px;
			line-height: 17px;
		}
	}
}

%resetIcon {
	background: {
		repeat: no-repeat;
		position: center;
		size: contain;
	}
	color: transparent;
	font-size: 0;
}
