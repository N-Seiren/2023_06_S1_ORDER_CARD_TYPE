@use '../abstract/' as *;

.ico {
	@each $SIZE in $ICON-SIZE-ALL {
		&-#{$SIZE} {
			@extend %resetIcon;
			display: inline-block;
			width: #{$SIZE}px;
			height: #{$SIZE}px;
			flex-shrink: 0;
		}
	}
}

@each $TYPE, $COLOR-LIST in $IMAGE-SET-ALL {
	@each $COLOR, $URL-LIST in $COLOR-LIST {
		@each $NAME, $VALUE in $URL-LIST {
			@if $COLOR == 'png' {
				.#{$TYPE}-#{$NAME}-#{$COLOR} {
					background-image: url('../images/' + $TYPE + '/' + $NAME + '.' + $VALUE);
				}
			} @else if $COLOR != '' {
				.#{$TYPE}-#{$NAME}-#{$COLOR} {
					background-image: url('../images/' + $TYPE + '/' + $NAME + '-' + $COLOR + '.' + $VALUE);
				}
			} @else {
				.#{$TYPE}-#{$NAME} {
					background-image: url('../images/' + $TYPE + '/' + $NAME + '.' + $VALUE);
				}
			}
		}
	}
}

.btn {
	@include set-flex($INLINE: true, $JUSTIFY: center, $ALIGN: center);
	height: 34px;
	border: {
		width: 1px;
		style: solid;
		radius: 4px;
	}
	background-color: transparent;
	outline: none;

	&.is {
		// Color
		&--blue {
			background-color: $C-PN;
			border-color: $C-PN;
			color: $C-W;
			&:active {
				background-color: $C-PD;
				border-color: $C-PD;
			}
			&:disabled {
				color: $C-FID;
				background-color: $C-BD;
				border-color: $C-BN;
			}
		}
		&--red {
			background-color: $C-SN;
			border-color: $C-SN;
			color: $C-W;
			&:active {
				background-color: $C-SD;
				border-color: $C-SD;
			}
			&:disabled {
				color: $C-FID;
				background-color: $C-BD;
				border-color: $C-BN;
			}
			&.has--ico {
			}
		}
		&--white {
			background-color: $C-W;
			border: 1px solid $C-BN;
			color: $C-FI;
			&:active {
				background-color: $C-BN;
				border-color: $C-BS;
			}
			&:disabled {
				color: $C-FID;
				background-color: $C-BN;
				border-color: $C-BN;
			}
			&.has--ico {
			}
		}

		// Type
		&--large {
			height: 44px;
		}
		&--search {
			@include set-flex($FIXED: true);
			width: 80px;
			height: 54px;
			font-weight: 500;
			font-size: 18px;

			[class*='ico-'] {
				$S: 22px;
				width: $S;
				height: $S;
				margin-right: 2px;
			}

			&.is--white {
				color: $C-FI;
			}
		}
		&--state {
			height: 60px;
			background-color: $C-W;
			font-size: 14px;
			line-height: 18px;
			font-weight: 600;

			&.is--blue {
				&,
				&:active {
					background-color: $C-W;
					border: 1px solid $C-PN;
					color: $C-PN;
				}
			}
			&.is--white {
				&,
				&:active {
					background-color: $C-W;
					border: 1px solid $C-BN;
					color: $C-FI;
				}
			}
			&.active {
				&,
				&:active {
					background-color: $C-PN;
					color: $C-W;
				}
			}

			&.disabled,
			&.disabled:active,
			&:disabled,
			&:disabled:active {
				background-color: $C-BD;
				border-color: $C-BN;
				color: $C-FID;
			}
		}

		// Width
		&--px25 {
			@include space(false, 25px, x);
		}
		&--px13 {
			@include space(false, 13px, x);
		}
		&--w160 {
			width: 160px;
		}
		&--w328 {
			width: 328px;
		}
		&--full {
			width: 100%;
		}
	}

	&.has--ico {
		[class*='ico-'] {
			margin-left: -8px;
		}
	}
}

.input {
	&-text {
		$PW: '.pw';
		$G: 7px;
		$S: 16px;
		$P: 7px;

		@include set-flex($DIRECTION: column);
		gap: 7px;

		input {
			display: block;
			width: 100%;
			padding: 8.5px 10px;
			border: 1px solid $C-BN;
			border-radius: 2px;
			color: $C-FI;
			font-size: 14px;
			line-height: 17px;
			font-weight: 400;
			outline: none;
			&::placeholder {
				color: $C-FP;
			}
			&::-moz-placeholder {
				color: $C-FP;
			}
			&::-webkit-input-placeholder {
				color: $C-FP;
			}

			&:focus:not(:disabled) {
				border-color: $C-PN;
			}

			&:disabled {
				background-color: $C-BD;
				border-color: $C-BN;
			}
		}

		.box {
			position: relative;
			width: 100%;

			// BUTTON
			&.has--button {
				@include set-flex($ALIGN: center);
				gap: $P;
				input {
					position: relative;
					width: 100%;
					z-index: 5;
				}

				&.single {
					input {
						padding-right: $S + $P + 16;
					}
				}
				&.double {
					input {
						padding-right: (($S + $P) * 2) + 16;
					}
				}
			}

			input {
				&:focus:not(:disabled) {
					& + #{$PW}-btn {
						#{$PW}-action {
							&.show {
								background-image: url(urlImg(ico, pw-on, blue));
							}
							&.hide {
								background-image: url(urlImg(
									ico,
									pw-off,
									blue
								));
							}
						}
						#{$PW}-search {
							background-image: url(urlImg(ico, search, blue));
						}
					}
				}

				&:disabled {
					& + #{$PW}-btn {
						#{$PW}-action {
							&.show {
								background-image: url(urlImg(ico, pw-on, gray));
							}
							&.hide {
								background-image: url(urlImg(
									ico,
									pw-off,
									gray
								));
							}
						}
						#{$PW}-search {
							background-image: url(urlImg(ico, search, gray));
						}
					}
				}
			}

			// TYPE
			#{$PW}-btn {
				@include set-flex($ALIGN: center);
				position: absolute;
				gap: $P;
				top: 50%;
				right: 10px;
				transform: translateY(-50%);
				z-index: 10;

				button,
				a {
					@extend %resetIcon;
					width: $S;
					height: $S;
				}

				#{$PW}-action {
					&.show {
						background-image: url(urlImg(ico, pw-on));
					}
					&.hide {
						background-image: url(urlImg(ico, pw-of));
					}
				}
				#{$PW}-remove {
					width: $S;
					height: $S;
					background-image: url(urlImg(ico, remove, gray));
					background-size: $S;
				}
				#{$PW}-search {
					width: $S + 8;
					height: $S + 8;
					background-image: url(urlImg(ico, search));
					background-size: $S + 8;
				}
			}
		}
		.valid {
			display: none;
			font-size: 15px;
			line-height: 18px;
		}

		// TYPE
		&.pass,
		&.focus {
			input:not(:disabled) {
				border-color: $C-PN;
			}
		}

		&.err {
			input:not(:disabled) {
				border-color: $C-SN;
			}
		}

		&.disabled {
			input {
				background-color: $C-BD;
				border-color: $C-BN;
				& + #{$PW}.show {
					background-image: url(urlImg(ico, pw-on, gray));
				}
				& + #{$PW}.hide {
					background-image: url(urlImg(ico, pw-off, gray));
				}
			}
		}

		&.pass,
		&.err {
			.valid {
				display: block;
			}
		}

		&.pass {
			.valid {
				color: $C-PN;
			}
		}
		&.err {
			.valid {
				color: $C-SN;
			}
		}

		// SIZE
		&.is--large {
			$G: 7px;
			$S: 24px;
			$P: 10px;
			.box {
				// BUTTON
				&.has--button {
					&.single {
						input {
							padding-right: $S + $P + 16;
						}
					}
					&.double {
						input {
							padding-right: (($S + $P) * 2) + 16;
						}
					}
				}

				#{$PW}-btn {
					right: 16px;
					gap: $P;
					button,
					a {
						width: $S;
						height: $S;
					}
					#{$PW}-remove {
						width: $S - 4;
						height: $S - 4;
						background-image: url(urlImg(ico, remove, gray));
						background-size: $S - 4;
					}
				}

				input {
					padding: 14px 16px;
					font-size: 18px;
					line-height: 21px;
				}
			}
		}
	}
	&-checkbox {
		@extend %defaultInput;
	}
	&-toggle {
		position: relative;
		input {
			position: absolute;
			width: 100%;
			height: 100%;
			top: 0;
			left: 0;
			opacity: 0;
			z-index: 10;

			& + .input-text {
				.icon {
					&::after {
						right: auto;
						left: 0;
					}
				}
			}

			&:checked {
				& + .input-text {
					.icon {
						&::after {
							right: 0;
							left: auto;
						}
					}
				}
			}

			&:checked:not(:disabled) {
				& + .input-text {
					.icon {
						background-color: $C-PN;
					}
				}
			}

			&:disabled {
				& + .input-text {
					.icon {
						background-color: $C-BD;
					}
				}
			}
		}
		.input-text {
			@include set-flex();
			position: relative;
			gap: 6px;
			z-index: 5;
			.icon {
				$H: 24px;
				@include set-flex($FIXED: true);
				position: relative;
				width: 50px;
				height: $H;
				background-color: $C-IN;
				border-radius: $H;
				&::after {
					$CIRCLE: 20px;
					position: absolute;
					display: block;
					width: $CIRCLE;
					height: $CIRCLE;
					margin-top: 2px;
					margin-right: 2px;
					margin-left: 2px;
					background-color: $C-W;
					border-radius: $CIRCLE;
					content: '';
				}
			}
			.text {
				color: $C-FI;
				font-weight: 400;
				font-size: 14px;
				line-height: 17px;
			}
		}
	}
	&-radio {
		@extend %defaultInput;
	}
}
